<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on ⚽️</title>
    <link>http://mylofi.fun/tags/git/</link>
    <description>Recent content in Git on ⚽️</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 20 Dec 2022 17:03:14 +0800</lastBuildDate>
    <atom:link href="http://mylofi.fun/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>清理 Git 文件夹过期引用</title>
      <link>http://mylofi.fun/posts/git-slim/</link>
      <pubDate>Tue, 20 Dec 2022 17:03:14 +0800</pubDate>
      <guid>http://mylofi.fun/posts/git-slim/</guid>
      <description>&lt;p&gt;Git 版本仓库提交过多，会导致项目根目录下的 &lt;code&gt;.git&lt;/code&gt; 文件夹体积巨大，原因可能不只是单纯的提交历史过多，而是历史提交中包含有对大文件的引用，即使现在的项目中已经不存在这些文件了，但其引用关联依旧会被 &lt;code&gt;git&lt;/code&gt; 保留下来。&lt;/p&gt;&#xA;&lt;h2 class=&#34;heading&#34; id=&#34;踩坑方案一&#34;&gt;&#xA;  踩坑方案一&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%b8%a9%e5%9d%91%e6%96%b9%e6%a1%88%e4%b8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;git filter-branch&lt;/code&gt; 命令可以改写历史中大量的提交，但是它有很多陷阱，而且官方文档中已经不推荐使用它来重写历史了，当然，这个坑是我踩过之后才知道的。&lt;/p&gt;&#xA;&lt;h3 class=&#34;heading&#34; id=&#34;识别查询大文件&#34;&gt;&#xA;  识别查询大文件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%86%e5%88%ab%e6%9f%a5%e8%af%a2%e5%a4%a7%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;找到项目根目录下的 &lt;code&gt;.idx&lt;/code&gt; 文件，路径：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;.git/objects/pack/pack-************.idx&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;执行：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;git rev-list --objects --all | grep -f &amp;lt;(git verify-pack -v  .git/objects/pack/******.idx| sort -k 3 -n | cut -f 1 -d &amp;quot; &amp;quot; | tail -10)&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;运行结果大致如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c0b33abdf3af4f0a4ae82d6243954eeb344432d9 src/components/Emoji/emoji.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a08b3b0f766d26729cbaf0b7e86212b0ca4a5569 dist/js/2a10361c.async.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1d26f0da81c885c676badb026367a47183013fb5 dist/js/84ad94bf.async.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eb07071cdea7e019953a3a6778a4bb6e728ea13d dist/js/4922a65f.async.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7ddf057a0e26f300137c84cf03dbe088a69da488 dist/js/62f9d99c.async.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 class=&#34;heading&#34; id=&#34;删除文件&#34;&gt;&#xA;  删除文件&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a0%e9%99%a4%e6%96%87%e4%bb%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;将该文件从历史记录的所有 tree 中移除，执行：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;code&gt;git filter-branch --index-filter &#39;git rm --cached --ignore-unmatch  src/components/Emoji/emoji.png&#39;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git 常用命令</title>
      <link>http://mylofi.fun/posts/git-command/</link>
      <pubDate>Thu, 18 Jul 2019 15:30:06 +0800</pubDate>
      <guid>http://mylofi.fun/posts/git-command/</guid>
      <description>&lt;p&gt;新建本地分支并切换到新分支&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git checkout -b feat/abc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本地分支推送到远程（x）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git push origin feat/abc:feat/abc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置跟踪（y）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git branch --set-upstream-to=origin/feat/abc feat/abc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：如果想要把新建的 abc 本地分支推送到远程并建立跟踪，需要使用以上 x 和 y 两条命令，也可以使用以下一条命令：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git push -u origin feat/abc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除本地分支&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git branch -d abc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果一个分支还没有被推送或合并，强制删除使用 -D&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git branch -D abc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除远程分支&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git push origin --delete abc&#xA;或 &#xA;git push origin :abc&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
